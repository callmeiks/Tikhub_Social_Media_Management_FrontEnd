import React, { useState } from "react";
import { DashboardLayout } from "@/components/ui/dashboard-layout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  RotateCcw,
  Wand2,
  Copy,
  Download,
  RefreshCw,
  Settings,
  Sparkles,
  FileText,
  MessageCircle,
} from "lucide-react";

const contentStyles = [
  { id: "xiaohongshu", name: "Â∞èÁ∫¢‰π¶", active: true },
  { id: "douyin", name: "ÊäñÈü≥", active: false },
  { id: "kuaishou", name: "Âø´Êâã", active: false },
  { id: "tiktok", name: "TikTok", active: false },
  { id: "instagram", name: "Instagram", active: false },
];

const rewriteOptions = [
  { id: "tone", name: "ËØ≠Ë∞ÉË∞ÉÊï¥", options: [
    { value: "formal", label: "Ê≠£Âºè" },
    { value: "casual", label: "ËΩªÊùæ" },
    { value: "humorous", label: "ÂπΩÈªò" },
    { value: "professional", label: "‰∏ì‰∏ö" }
  ]},
  { id: "length", name: "ÈïøÂ∫¶ÊéßÂà∂", options: [
    { value: "concise", label: "Á≤æÁÆÄ" },
    { value: "standard", label: "Ê†áÂáÜ" },
    { value: "detailed", label: "ËØ¶ÁªÜ" },
    { value: "extended", label: "Êâ©Â±ï" }
  ]},
  {
    id: "style",
    name: "È£éÊ†ºÁ±ªÂûã",
    options: [
      { value: "viral", label: "ÁàÜÊ¨æÊñáÊ°à", description: "È´ò‰º†Êí≠ÊÄßÔºåÂÆπÊòìËµ∞Á∫¢" },
      { value: "emotional", label: "ÊÉÖÊÑüÊñáÊ°à", description: "ÂºïÂèëÊÉÖÊÑüÂÖ±È∏£" },
      { value: "suspense", label: "ÊÇ¨ÂøµÊñáÊ°à", description: "Âà∂ÈÄ†ÊÇ¨ÂøµÔºåÂê∏ÂºïËßÇÁúã" },
      { value: "tutorial", label: "ÊïôÁ®ãÊñáÊ°à", description: "ÂÆûÁî®Âπ≤Ë¥ßÂàÜ‰∫´" },
      { value: "story", label: "ÊïÖ‰∫ãÊñáÊ°à", description: "Âèô‰∫ãÊÄßÂº∫ÔºåÂºï‰∫∫ÂÖ•ËÉú" },
      { value: "trending", label: "ÁÉ≠ÁÇπÊñáÊ°à", description: "ÁªìÂêàÂΩì‰∏ãÁÉ≠ÁÇπËØùÈ¢ò" },
    ],
  },
  {
    id: "track",
    name: "ËµõÈÅìÁ±ªÂûã",
    options: [
      { value: "beauty", label: "ÁæéÂ¶Ü" },
      { value: "fitness", label: "ÂÅ•Ë∫´" },
      { value: "food", label: "ÁæéÈ£ü" },
      { value: "tech", label: "ÁßëÊäÄ" },
      { value: "education", label: "ÊïôËÇ≤" },
      { value: "entertainment", label: "Â®±‰πê" },
      { value: "travel", label: "ÊóÖË°å" },
      { value: "fashion", label: "Êó∂Â∞ö" }
    ],
  },
  { id: "language", name: "ËØ≠Ë®Ä", options: [
    { value: "chinese", label: "‰∏≠Êñá" },
    { value: "english", label: "Ëã±Êñá" }
  ]},
];

const exampleTexts = [
  "ÁæéÂ¶ÜÊïôÁ®ã„ÄÅÂè£Á∫¢ËØïËâ≤„ÄÅÊä§ËÇ§ÊäÄÂ∑ß",
  "ÂÅ•Ë∫´ËµõÈÅì",
  "‰ªäÂ§©ÁªôÂ§ßÂÆ∂ÂàÜ‰∫´‰∏Ä‰∏™Ë∂ÖÁ∫ßÂÆûÁî®ÁöÑÁîüÊ¥ªÂ∞èÊäÄÂ∑ßÔºåÂè™Ë¶Å‰∏âÊ≠•Â∞±ËÉΩËÆ©‰Ω†ÁöÑÁöÆËÇ§ÂèòÂæóÊ∞¥Â´©ÂÖâÊªë...",
];

export default function CaptionWriter() {
  const [inputText, setInputText] = useState("");
  const [outputText, setOutputText] = useState("");
  const [isRewriting, setIsRewriting] = useState(false);
  const [activeStyle, setActiveStyle] = useState("xiaohongshu");
  const [selectedOptions, setSelectedOptions] = useState({
    tone: "casual",
    length: "standard",
    style: "viral",
    track: "beauty",
    language: "chinese",
  });

  const handleRewrite = async () => {
    if (!inputText.trim()) return;

    setIsRewriting(true);

    // Ê®°ÊãüAPIË∞ÉÁî®
    setTimeout(() => {
      const outputContent = `„ÄêAIÁîüÊàêÊñáÊ°à„Äë\n\nüìù ËæìÂÖ•ÂÜÖÂÆπÔºö${inputText.substring(0, 100)}${inputText.length > 100 ? "..." : ""}\n\n‚ú® ÁîüÊàêÁªìÊûúÔºö\nÁªèËøáAIÊô∫ËÉΩÂ§ÑÁêÜÔºåÁªìÂêà${activeStyle}Âπ≥Âè∞È£éÊ†ºÁâπÁÇπÔºåË∞ÉÊï¥‰∏∫${selectedOptions.tone}ËØ≠Ë∞ÉÔºå${selectedOptions.length}ÈïøÂ∫¶Ôºå${selectedOptions.style}Á±ªÂûãÔºåÈÄÇÈÖç${selectedOptions.track}ËµõÈÅìÔºå${selectedOptions.language}ËØ≠Ë®ÄÁöÑÂÖ®Êñ∞‰ºòË¥®ÊñáÊ°àÂÜÖÂÆπ„ÄÇ`;

      setOutputText(outputContent);
      setIsRewriting(false);
    }, 2000);
  };

  const handleCopy = (text: string) => {
    navigator.clipboard.writeText(text);
    // ËøôÈáåÂèØ‰ª•Ê∑ªÂä†toastÊèêÁ§∫
  };

  const insertExample = (text: string) => {
    setInputText(text);
  };

  return (
    <DashboardLayout
      title="ÊñáÊ°àÁîüÊàê"
      subtitle="AIÊô∫ËÉΩÁîüÊàêÔºåÊèêÂçáÂÜÖÂÆπË¥®ÈáèÂíåÂéüÂàõÊÄß"
      actions={
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" className="h-8">
            <Settings className="mr-2 h-3.5 w-3.5" />
            ËÆæÁΩÆ
          </Button>
          <Button size="sm" className="h-8 brand-accent">
            <Sparkles className="mr-2 h-3.5 w-3.5" />
            ÊâπÈáèÂ§ÑÁêÜ
          </Button>
        </div>
      }
    >
      <div className="space-y-6">
        {/* Style Selection */}
        <Card className="border border-border">
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center">
              <Wand2 className="mr-2 h-4 w-4" />
              ÈÄâÊã©ÊñáÊ°àÈ£éÊ†º
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {contentStyles.map((style) => (
                <Button
                  key={style.id}
                  variant={activeStyle === style.id ? "default" : "outline"}
                  size="sm"
                  className={`h-8 ${
                    activeStyle === style.id
                      ? "bg-foreground text-background"
                      : "hover:bg-muted"
                  }`}
                  onClick={() => setActiveStyle(style.id)}
                >
                  {style.name}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Input Section */}
          <div className="lg:col-span-2">
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center justify-between">
                  <span className="flex items-center">
                    <FileText className="mr-2 h-4 w-4" />
                    ÂÜÖÂÆπËæìÂÖ•
                  </span>
                  <span className="text-xs text-muted-foreground">
                    {inputText.length}/800
                  </span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="mb-3">
                  <div className="flex flex-wrap gap-2 text-xs text-muted-foreground">
                    <span className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-blue-500 rounded-full"></span>
                      ÂÖ≥ÈîÆËØçËæìÂÖ•
                    </span>
                    <span className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-green-500 rounded-full"></span>
                      ÊÑüÂÖ¥Ë∂£ËµõÈÅì
                    </span>
                    <span className="flex items-center gap-1">
                      <span className="w-1.5 h-1.5 bg-orange-500 rounded-full"></span>
                      ÂéüÂßãÊñáÊ°à
                    </span>
                  </div>
                </div>
                <Textarea
                  placeholder={
                    "üìù ‰∏âÁßçËæìÂÖ•ÊñπÂºè‰ªªÈÄâÂÖ∂‰∏ÄÔºö\n\n1Ô∏è‚É£ ÂÖ≥ÈîÆËØçËæìÂÖ•\n   ÁæéÂ¶ÜÊïôÁ®ã„ÄÅÊä§ËÇ§ÊäÄÂ∑ß„ÄÅÂè£Á∫¢Êé®Ëçê\n   ÂÅ•Ë∫´Âä®‰Ωú„ÄÅÂáèËÇ•ÊñπÊ≥ï„ÄÅËõãÁôΩÁ≤âÊµãËØÑ\n\n2Ô∏è‚É£ ËµõÈÅìËæìÂÖ•\n   ÁæéÂ¶ÜËµõÈÅì„ÄÅÂÅ•Ë∫´ËµõÈÅì„ÄÅÁæéÈ£üËµõÈÅì\n   ÁßëÊäÄÊï∞Á†Å„ÄÅÊïôËÇ≤ÂüπËÆ≠„ÄÅÊó∂Â∞öÁ©øÊê≠\n\n3Ô∏è‚É£ ÂÆåÊï¥ÊñáÊ°àËæìÂÖ•\n   ‰ªäÂ§©ÁªôÂ§ßÂÆ∂ÂàÜ‰∫´‰∏Ä‰∏™Êä§ËÇ§Â∞èÊäÄÂ∑ßÔºå\n   Ëøô‰∏™ÊñπÊ≥ïÊàëÁî®‰∫Ü3‰∏™ÊúàÊïàÊûúÂæàÊòéÊòæ...\n\nüí° ÊèêÁ§∫ÔºöAI‰ºöËá™Âä®ËØÜÂà´ÊÇ®ÁöÑËæìÂÖ•Á±ªÂûãÂπ∂ÁîüÊàêÂØπÂ∫îÈ£éÊ†ºÁöÑÊñáÊ°àÂÜÖÂÆπ"
                  }
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  className="min-h-[320px] resize-none border-0 p-0 focus-visible:ring-0"
                  maxLength={800}
                />

                <div className="flex items-center justify-between mt-4 pt-4 border-t border-border">
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleRewrite}
                      disabled={!inputText.trim() || isRewriting}
                      className="h-8"
                    >
                      {isRewriting ? (
                        <RefreshCw className="mr-2 h-3.5 w-3.5 animate-spin" />
                      ) : (
                        <RotateCcw className="mr-2 h-3.5 w-3.5" />
                      )}
                      {isRewriting ? "ÊîπÂÜô‰∏≠..." : "ÈáçÊñ∞ÊûÑÊÄù"}
                    </Button>

                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setInputText("")}
                      className="h-8"
                    >
                      Ê∏ÖÁ©∫
                    </Button>
                  </div>

                  <div className="flex space-x-1">
                    {exampleTexts.map((example, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        size="sm"
                        onClick={() => insertExample(example)}
                        className="h-6 text-xs text-muted-foreground hover:text-foreground"
                      >
                        Á§∫‰æã{index + 1}
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Output Section */}
            {(outputText || isRewriting) && (
              <Card className="border border-border mt-4">
                <CardHeader className="pb-3">
                  <CardTitle className="text-base flex items-center justify-between">
                    <span className="flex items-center">
                      <Sparkles className="mr-2 h-4 w-4" />
                      ÊîπÂÜôÁªìÊûú
                    </span>
                    {outputText && (
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleCopy(outputText)}
                        className="h-6"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    )}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  {isRewriting ? (
                    <div className="flex items-center justify-center py-8">
                      <div className="flex items-center space-x-2">
                        <RefreshCw className="h-4 w-4 animate-spin" />
                        <span className="text-sm text-muted-foreground">
                          AIÊ≠£Âú®ÈáçÊñ∞ÊûÑÊÄùÊñáÊ°à...
                        </span>
                      </div>
                    </div>
                  ) : (
                    <div className="min-h-[150px] p-3 bg-muted/30 rounded-md">
                      <pre className="whitespace-pre-wrap text-sm leading-relaxed font-sans">
                        {outputText}
                      </pre>
                    </div>
                  )}
                </CardContent>
              </Card>
            )}
          </div>

          {/* Settings Panel */}
          <div className="space-y-4">
            {/* Rewrite Options */}
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base">ÊîπÂÜôÈÄâÈ°π</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {rewriteOptions.map((option) => (
                  <div key={option.id}>
                    <p className="text-sm font-medium mb-2">{option.name}</p>

                    {/* Use dropdown for style and track types */}
                    {option.id === "style" || option.id === "track" ? (
                      <Select
                        value={
                          selectedOptions[
                            option.id as keyof typeof selectedOptions
                          ]
                        }
                        onValueChange={(value) =>
                          setSelectedOptions((prev) => ({
                            ...prev,
                            [option.id]: value,
                          }))
                        }
                      >
                        <SelectTrigger className="w-full">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {option.options.map((opt: any) => {
                            const isObject = typeof opt === "object";
                            const optValue = isObject ? opt.value : opt;
                            const optLabel = isObject ? opt.label : opt;
                            const optDescription = isObject
                              ? opt.description
                              : null;

                            return (
                              <SelectItem key={optValue} value={optValue}>
                                <div className="flex flex-col">
                                  <span className="font-medium">
                                    {optLabel}
                                  </span>
                                  {optDescription && (
                                    <span className="text-xs text-muted-foreground">
                                      {optDescription}
                                    </span>
                                  )}
                                </div>
                              </SelectItem>
                            );
                          })}
                        </SelectContent>
                      </Select>
                    ) : (
                      /* Use buttons for other options */
                      <div className="grid grid-cols-2 gap-1">
                        {option.options.map((opt: any) => {
                          const optValue =
                            typeof opt === "object" ? opt.value : opt;
                          const optLabel =
                            typeof opt === "object" ? opt.label : opt;

                          return (
                            <Button
                              key={optValue}
                              variant={
                                selectedOptions[
                                  option.id as keyof typeof selectedOptions
                                ] === optValue
                                  ? "default"
                                  : "outline"
                              }
                              size="sm"
                              className="h-7 text-xs"
                              onClick={() =>
                                setSelectedOptions((prev) => ({
                                  ...prev,
                                  [option.id]: optValue,
                                }))
                              }
                            >
                              {optLabel}
                            </Button>
                          );
                        })}
                      </div>
                    )}
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* Usage Stats */}
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base">‰ªäÊó•‰ΩøÔøΩÔøΩ</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">
                      Â∑≤‰ΩøÁî®
                    </span>
                    <span className="text-sm font-medium">10 Ê¨°</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Ââ©‰Ωô</span>
                    <span className="text-sm font-medium">90 Ê¨°</span>
                  </div>
                  <div className="w-full bg-muted rounded-full h-2">
                    <div
                      className="bg-foreground h-2 rounded-full"
                      style={{ width: "10%" }}
                    />
                  </div>
                  <Badge
                    variant="secondary"
                    className="w-full justify-center text-xs"
                  >
                    üéâ ‰ªäÊó•ÂÖçË¥πÈ¢ùÂ∫¶ 100Ê¨°
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Tips */}
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center">
                  <MessageCircle className="mr-2 h-4 w-4" />
                  ‰ΩøÁî®ÔøΩÔøΩÔøΩÂ∑ß
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-xs text-muted-foreground">
                  <p>‚Ä¢ ËæìÂÖ•ÂÆåÊï¥ÁöÑÂéüÂßãÊñáÊ°àÊïàÊûúÊõ¥Â•Ω</p>
                  <p>‚Ä¢ ÈÄâÊã©ÂêàÈÄÇÁöÑÂπ≥Âè∞È£éÊ†ºÊèêÂçáÂåπÈÖçÂ∫¶</p>
                  <p>‚Ä¢ ÂèØÂ§öÊ¨°ÈáçÊñ∞ÊûÑÊÄùËé∑Âæó‰∏çÂêåÁâàÊú¨</p>
                  <p>‚Ä¢ ÊîØÊåÅÊâπÈáèÂ§ÑÁêÜÂ§öÊù°ÊñáÊ°à</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}
