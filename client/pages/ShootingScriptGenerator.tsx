import React, { useState } from "react";
import { DashboardLayout } from "@/components/ui/dashboard-layout";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Video,
  Wand2,
  Copy,
  RefreshCw,
  Settings,
  Sparkles,
  FileText,
  MessageCircle,
  TrendingUp,
  Target,
  Hash,
  Star,
  ThumbsUp,
  Eye,
  Clock,
  Play,
} from "lucide-react";

const supportedPlatforms = [
  { id: "wechat", name: "ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑", emoji: "üí¨", active: true },
  { id: "csdn", name: "CSDN", emoji: "üíª", active: true },
  { id: "zhihu", name: "Áü•‰πé", emoji: "ü§î", active: true },
  { id: "douyin", name: "ÊäñÈü≥", emoji: "üéµ", active: true },
  { id: "kuaishou", name: "Âø´Êâã", emoji: "‚ö°", active: true },
  { id: "xiaohongshu", name: "Â∞èÁ∫¢‰π¶", emoji: "üìï", active: true },
  { id: "tiktok", name: "TikTok", emoji: "üé¨", active: true },
];

const scriptTypes = [
  { id: "tutorial", name: "ÊïôÁ®ãËÑöÊú¨", description: "Áü•ËØÜÂàÜ‰∫´Á±ªÂÜÖÂÆπ" },
  { id: "vlog", name: "ÁîüÊ¥ªvlog", description: "Êó•Â∏∏ÁîüÊ¥ªËÆ∞ÂΩï" },
  { id: "review", name: "‰∫ßÂìÅÊµãËØÑ", description: "ÂïÜÂìÅËØÑÊµã‰ªãÁªç" },
  { id: "story", name: "ÊïÖ‰∫ãÂâßÊÉÖ", description: "ÊÉÖËäÇÂèô‰∫ãÁ±ª" },
  { id: "interview", name: "ÈááËÆøÂØπËØù", description: "ËÆøË∞àÈóÆÁ≠îÂΩ¢Âºè" },
  { id: "promotion", name: "Ëê•ÈîÄÊé®Âπø", description: "ÂìÅÁâåÂÆ£‰º†Á±ª" },
];

const videoDurations = [
  { id: "short", name: "Áü≠ËßÜÈ¢ë (15-60Áßí)", duration: "15-60Áßí" },
  { id: "medium", name: "‰∏≠Á≠â (1-3ÂàÜÈíü)", duration: "1-3ÂàÜÈíü" },
  { id: "long", name: "ÈïøËßÜÈ¢ë (3-10ÂàÜÈíü)", duration: "3-10ÂàÜÈíü" },
  { id: "extended", name: "Ë∂ÖÈïø (10ÂàÜÈíü‰ª•‰∏ä)", duration: "10ÂàÜÈíü‰ª•‰∏ä" },
];

const generatedScripts = [
  {
    id: 1,
    title: "Êä§ËÇ§‰∫ßÂìÅÊµãËØÑËÑöÊú¨",
    content: `„ÄêÂºÄÂú∫„ÄëÔºà3ÁßíÔºâ
ÈïúÂ§¥ÔºöÁâπÂÜô‰∫ßÂìÅÂåÖË£Ö
Âè∞ËØçÔºöÂßêÂ¶π‰ª¨ÔºÅ‰ªäÂ§©ÊµãËØÑËøôÊ¨æÂè∑Áß∞3Â§©ËßÅÊïàÁöÑÁ≤æÂçéÔºÅ

„Äê‰∫ßÂìÅ‰ªãÁªç„ÄëÔºà10ÁßíÔºâ
ÈïúÂ§¥ÔºöÊâãÊåÅ‰∫ßÂìÅÂ±ïÁ§∫ÂêÑ‰∏™ËßíÂ∫¶
Âè∞ËØçÔºöÈ¶ñÂÖàÁúãÂåÖË£ÖÔºåÁÆÄÁ∫¶Â§ßÊ∞îÔºå‰∏ªË¶ÅÊàêÂàÜÊòØÁéªÂ∞øÈÖ∏ÂíåÁÉüÈÖ∞ËÉ∫...

„Äê‰ΩøÁî®ËøáÁ®ã„ÄëÔºà20ÁßíÔºâ
ÈïúÂ§¥Ôºö‰∏äËÑ∏‰ΩøÁî®ËøáÁ®ã
Âè∞ËØçÔºöË¥®Âú∞ÊØîËæÉÊ∏ÖÁàΩÔºåÊé®ÂºÄÂæàÂ•ΩÂê∏Êî∂ÔºåÊ≤°ÊúâÈªèËÖªÊÑü...

„ÄêÊïàÊûúÂ±ïÁ§∫„ÄëÔºà15ÁßíÔºâ
ÈïúÂ§¥ÔºöÂØπÊØîÁÖßÁâá
Âè∞ËØçÔºöÁî®‰∫Ü‰∏ÄÂë®ÁöÑÊïàÊûúÂØπÊØîÔºåËÇâÁúºÂèØËßÅÁöÑÊîπÂñÑ...

„ÄêÊÄªÁªì„ÄëÔºà7ÁßíÔºâ
ÈïúÂ§¥ÔºöÈù¢ÂêëÈïúÂ§¥
Âè∞ËØçÔºöÊÄª‰ΩìÊù•ËØ¥ÊÄß‰ª∑ÊØîÂæàÈ´òÔºåÊé®ËçêÁªôÂ§ßÂÆ∂ÔºÅËÆ∞ÂæóÁÇπËµûÊî∂ËóèÂì¶~`,
    platform: "ÊäñÈü≥",
    type: "‰∫ßÂìÅÊµãËØÑ",
    duration: "1ÂàÜÈíü",
    score: 92,
  },
  {
    id: 2,
    title: "ÂåñÂ¶ÜÊïôÁ®ãËÑöÊú¨",
    content: `„ÄêÂºÄÂú∫„ÄëÔºà5ÁßíÔºâ
ÈïúÂ§¥ÔºöÁ¥†È¢úÁâπÂÜô
Âè∞ËØçÔºö‰ªäÂ§©ÊïôÂ§ßÂÆ∂10ÂàÜÈíüÊâìÈÄ†Èü©Á≥ªÂ¶ÜÂÆπÔºÅ

„ÄêÂ∫ïÂ¶ÜÈÉ®ÂàÜ„ÄëÔºà20ÁßíÔºâ
ÈïúÂ§¥Ôºö‰∏äÂ¶ÜËøáÁ®ãÁâπÂÜô
Âè∞ËØçÔºöÂÖàÁî®Â¶ÜÂâç‰π≥ÔºåÁÑ∂ÂêéÊ∞îÂû´ËñÑËñÑ‰∏ÄÂ±Ç...

„ÄêÁúºÂ¶ÜÈÉ®ÂàÜ„ÄëÔºà25ÁßíÔºâ
ÈïúÂ§¥ÔºöÁúºÈÉ®ÂåñÂ¶ÜÁâπÂÜô
Âè∞ËØçÔºöÁúºÂΩ±ÈÄâÊã©Â§ßÂú∞Ëâ≤Á≥ªÔºåËΩªÊâ´ÁúºÁ™ù...

„ÄêÂÆåÂ¶ÜÂ±ïÁ§∫„ÄëÔºà10ÁßíÔºâ
ÈïúÂ§¥ÔºöÂÆåÊï¥Â¶ÜÂÆπÂ±ïÁ§∫
Âè∞ËØçÔºöÂÆåÊàêÔºÅÊòØ‰∏çÊòØÂæàÁÆÄÂçïÔºüÂø´Â≠¶Ëµ∑Êù•ÂêßÔºÅ`,
    platform: "Â∞èÁ∫¢‰π¶",
    type: "ÊïôÁ®ãËÑöÊú¨",
    duration: "1ÂàÜÈíü",
    score: 88,
  },
];

const exampleTopics = ["Êó•Â∏∏Êä§ËÇ§ÊïôÁ®ã", "ÁæéÈ£üÂà∂‰ΩúËøáÁ®ã", "Á©øÊê≠ÂàÜ‰∫´", "ÊóÖË°åvlog"];

export default function ShootingScriptGenerator() {
  const [topic, setTopic] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedPlatform, setSelectedPlatform] = useState("douyin");
  const [selectedType, setSelectedType] = useState("tutorial");
  const [selectedDuration, setSelectedDuration] = useState("short");
  const [targetAge, setTargetAge] = useState("");
  const [targetGender, setTargetGender] = useState("");
  const [specialRequirements, setSpecialRequirements] = useState("");
  const [results, setResults] = useState(generatedScripts);

  const handleGenerate = async () => {
    if (!topic.trim()) {
      alert("ËØ∑ËæìÂÖ•ËßÜÈ¢ë‰∏ªÈ¢ò");
      return;
    }

    setIsGenerating(true);
    // Ê®°ÊãüAPIË∞ÉÁî®
    setTimeout(() => {
      setResults([
        ...generatedScripts.map((script) => ({
          ...script,
          title: script.title + " (Êñ∞ÁîüÊàê)",
        })),
      ]);
      setIsGenerating(false);
    }, 3000);
  };

  const handleCopy = (content: string) => {
    navigator.clipboard.writeText(content);
  };

  const insertExample = (example: string) => {
    setTopic(example);
  };

  const getScoreColor = (score: number) => {
    if (score >= 90) return "text-green-600";
    if (score >= 80) return "text-yellow-600";
    return "text-gray-600";
  };

  return (
    <DashboardLayout
      title="ÊãçÊëÑËÑöÊú¨ÁîüÊàê"
      subtitle="Êô∫ËÉΩÁîüÊàêÂêÑÁ±ªËßÜÈ¢ëÊãçÊëÑËÑöÊú¨ÔºåÂåÖÂê´ÈïúÂ§¥„ÄÅÂè∞ËØç„ÄÅÊó∂Èó¥ÂÆâÊéí"
      actions={
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" className="h-8">
            <Settings className="mr-2 h-3.5 w-3.5" />
            ËÆæÁΩÆ
          </Button>
        </div>
      }
    >
      <div className="space-y-6">
        {/* Platform Support */}
        <Card className="border border-border">
          <CardHeader className="pb-3">
            <CardTitle className="text-base flex items-center">
              <Video className="mr-2 h-4 w-4" />
              ÊîØÊåÅÂπ≥Âè∞
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="flex flex-wrap gap-2">
              {supportedPlatforms.map((platform) => (
                <Button
                  key={platform.id}
                  variant={
                    selectedPlatform === platform.id ? "default" : "outline"
                  }
                  size="sm"
                  className={`h-8 ${
                    selectedPlatform === platform.id
                      ? "bg-foreground text-background"
                      : "hover:bg-muted"
                  }`}
                  onClick={() => setSelectedPlatform(platform.id)}
                >
                  <span className="mr-1">{platform.emoji}</span>
                  {platform.name}
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Input Section */}
          <div className="lg:col-span-2">
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center justify-between">
                  <span className="flex items-center">
                    <FileText className="mr-2 h-4 w-4" />
                    ËßÜÈ¢ë‰∏ªÈ¢ò
                  </span>
                  <span className="text-xs text-muted-foreground">
                    {topic.length}/500
                  </span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <Textarea
                  placeholder="ËØ∑ÊèèËø∞ÊÇ®Ë¶ÅÂà∂‰ΩúÁöÑËßÜÈ¢ëÂÜÖÂÆπ‰∏ªÈ¢òÔºåË∂äËØ¶ÁªÜË∂äÂ•ΩÔºå‰æãÂ¶ÇÔºö&#10;&#10;‚Ä¢ Êó•Â∏∏Êä§ËÇ§Ê≠•È™§ÂàÜ‰∫´ÔºåÈÄÇÂêàÂàùÂ≠¶ËÄÖ&#10;‚Ä¢ 10ÂàÜÈíüÂø´ÊâãÊó©È§êÂà∂‰ΩúÊïôÁ®ã&#10;‚Ä¢ ÁßãÂ≠£Á©øÊê≠Êé®ËçêÔºåËÅåÂú∫È£éÊ†º&#10;‚Ä¢ Âë®Êú´Áü≠ÈÄîÊóÖË°åvlogÔºåÊµ∑ËæπÂ∫¶ÂÅá"
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  className="min-h-[120px] resize-none border-0 p-0 focus-visible:ring-0"
                  maxLength={500}
                />

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {/* Script Type */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">ËÑöÊú¨Á±ªÂûã</label>
                    <Select
                      value={selectedType}
                      onValueChange={setSelectedType}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {scriptTypes.map((type) => (
                          <SelectItem key={type.id} value={type.id}>
                            <div className="flex flex-col">
                              <span className="font-medium">{type.name}</span>
                              <span className="text-xs text-muted-foreground">
                                {type.description}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  {/* Video Duration */}
                  <div className="space-y-2">
                    <label className="text-sm font-medium">ËßÜÈ¢ëÊó∂Èïø</label>
                    <Select
                      value={selectedDuration}
                      onValueChange={setSelectedDuration}
                    >
                      <SelectTrigger className="w-full">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {videoDurations.map((duration) => (
                          <SelectItem key={duration.id} value={duration.id}>
                            <div className="flex flex-col">
                              <span className="font-medium">
                                {duration.name}
                              </span>
                              <span className="text-xs text-muted-foreground">
                                {duration.duration}
                              </span>
                            </div>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <label className="text-sm font-medium">
                      ÁõÆÊ†áÂπ¥ÈæÑÔºàÂèØÈÄâÔºâ
                    </label>
                    <Input
                      placeholder="‰æãÂ¶ÇÔºö18-25Â≤Å„ÄÅ30-40Â≤Å„ÄÅÂÖ®Âπ¥ÈæÑÊÆµ"
                      value={targetAge}
                      onChange={(e) => setTargetAge(e.target.value)}
                      className="border-border"
                    />
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium">
                      ÁõÆÊ†áÊÄßÂà´ÔºàÂèØÈÄâÔºâ
                    </label>
                    <Input
                      placeholder="‰æãÂ¶ÇÔºöÁî∑ÊÄß„ÄÅÂ•≥ÊÄß„ÄÅ‰∏çÈôê"
                      value={targetGender}
                      onChange={(e) => setTargetGender(e.target.value)}
                      className="border-border"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <label className="text-sm font-medium">
                    ÁâπÊÆäË¶ÅÊ±ÇÔºàÂèØÈÄâÔºâ
                  </label>
                  <Input
                    placeholder="‰æãÂ¶ÇÔºöÈúÄË¶Å‰∫ßÂìÅÊ§çÂÖ•„ÄÅË¶ÅÊ±ÇÊÇ¨ÂøµÂºÄÂ§¥„ÄÅÈúÄË¶Å‰∫íÂä®ÁéØËäÇ"
                    value={specialRequirements}
                    onChange={(e) => setSpecialRequirements(e.target.value)}
                    className="border-border"
                  />
                </div>

                <div className="flex items-center justify-between pt-4 border-t border-border">
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={handleGenerate}
                      disabled={!topic.trim() || isGenerating}
                      className="h-8"
                    >
                      {isGenerating ? (
                        <RefreshCw className="mr-2 h-3.5 w-3.5 animate-spin" />
                      ) : (
                        <Sparkles className="mr-2 h-3.5 w-3.5" />
                      )}
                      {isGenerating ? "ÁîüÊàê‰∏≠..." : "ÁîüÊàêËÑöÊú¨"}
                    </Button>

                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => {
                        setTopic("");
                        setTargetAge("");
                        setTargetGender("");
                        setSpecialRequirements("");
                      }}
                      className="h-8"
                    >
                      Ê∏ÖÁ©∫
                    </Button>
                  </div>

                  <div className="flex space-x-1">
                    {exampleTopics.map((example, index) => (
                      <Button
                        key={index}
                        variant="ghost"
                        size="sm"
                        onClick={() => insertExample(example)}
                        className="h-6 text-xs text-muted-foreground hover:text-foreground"
                      >
                        Á§∫‰æã{index + 1}
                      </Button>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Results Section */}
            <Card className="border border-border mt-4">
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center justify-between">
                  <span className="flex items-center">
                    <Sparkles className="mr-2 h-4 w-4" />
                    ÁîüÊàêÁªìÊûú ({results.length}‰∏™ËÑöÊú¨)
                  </span>
                  <Button variant="ghost" size="sm" className="h-6">
                    <RefreshCw className="h-3 w-3" />
                  </Button>
                </CardTitle>
              </CardHeader>
              <CardContent>
                {isGenerating ? (
                  <div className="flex items-center justify-center py-8">
                    <div className="text-center">
                      <RefreshCw className="h-8 w-8 animate-spin text-brand-accent mx-auto mb-4" />
                      <p className="text-sm text-muted-foreground mb-2">
                        AIÊ≠£Âú®ÁîüÊàêÊãçÊëÑËÑöÊú¨...
                      </p>
                      <div className="flex items-center justify-center space-x-2 text-xs text-muted-foreground">
                        <span>ÂàÜÊûê‰∏ªÈ¢ò</span>
                        <span>‚Ä¢</span>
                        <span>ËßÑÂàíÁªìÊûÑ</span>
                        <span>‚Ä¢</span>
                        <span>ÁîüÊàêËÑöÊú¨</span>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="space-y-4">
                    {results.map((script) => (
                      <div
                        key={script.id}
                        className="p-4 border border-border rounded-lg hover:bg-muted/30 transition-colors"
                      >
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex-1 pr-4">
                            <h3 className="text-sm font-medium mb-2">
                              {script.title}
                            </h3>
                            <pre className="whitespace-pre-wrap text-xs leading-relaxed text-muted-foreground mb-3 bg-muted/30 p-3 rounded">
                              {script.content}
                            </pre>
                            <div className="flex items-center space-x-4 text-xs text-muted-foreground">
                              <span className="flex items-center">
                                <Target className="mr-1 h-3 w-3" />
                                {script.platform}
                              </span>
                              <span className="flex items-center">
                                <Star className="mr-1 h-3 w-3" />
                                {script.type}
                              </span>
                              <span className="flex items-center">
                                <Clock className="mr-1 h-3 w-3" />
                                {script.duration}
                              </span>
                            </div>
                          </div>
                          <div className="flex items-center space-x-2">
                            <span
                              className={`text-xs font-medium ${getScoreColor(script.score)}`}
                            >
                              {script.score}ÂàÜ
                            </span>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleCopy(script.content)}
                              className="h-6 w-6 p-0"
                            >
                              <Copy className="h-3 w-3" />
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Right Sidebar */}
          <div className="space-y-4">
            {/* Daily Usage */}
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base">‰ªäÊó•‰ΩøÁî®</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">
                      Â∑≤ÁîüÊàê
                    </span>
                    <span className="text-sm font-medium">5 Ê¨°</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-muted-foreground">Ââ©‰Ωô</span>
                    <span className="text-sm font-medium">45 Ê¨°</span>
                  </div>
                  <div className="w-full bg-muted rounded-full h-2">
                    <div
                      className="bg-foreground h-2 rounded-full"
                      style={{ width: "10%" }}
                    />
                  </div>
                  <Badge
                    variant="secondary"
                    className="w-full justify-center text-xs"
                  >
                    üé¨ ÊØèÔøΩÔøΩÂÖçË¥πÈ¢ùÂ∫¶ 50Ê¨°
                  </Badge>
                </div>
              </CardContent>
            </Card>

            {/* Creative Tips */}
            <Card className="border border-border">
              <CardHeader className="pb-3">
                <CardTitle className="text-base flex items-center">
                  <MessageCircle className="mr-2 h-4 w-4" />
                  ÊãçÊëÑÊäÄÂ∑ß
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2 text-xs text-muted-foreground">
                  <p>‚Ä¢ ÂºÄÂ§¥3ÁßíÊúÄÂÖ≥ÈîÆÔºåË¶ÅÂø´ÈÄüÊäì‰ΩèÊ≥®ÊÑèÂäõ</p>
                  <p>‚Ä¢ ÈïúÂ§¥ÂàáÊç¢Ë¶ÅÊúâËäÇÂ•èÊÑüÂíåÈÄªËæëÊÄß</p>
                  <p>‚Ä¢ Âè∞ËØçË¶ÅÂè£ËØ≠ÂåñÔºåÈÅøÂÖçËøá‰∫é‰π¶Èù¢</p>
                  <p>‚Ä¢ ÁªìÂ∞æË¶ÅÊúâÊòéÁ°ÆÁöÑË°åÂä®Âè¨Âî§</p>
                  <p>‚Ä¢ Ê†πÊçÆÂπ≥Âè∞ÁâπËâ≤Ë∞ÉÊï¥ÂÜÖÂÆπÈ£éÊ†º</p>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}
