import { useState } from "react";
import { DashboardLayout } from "@/components/ui/dashboard-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { ArrowRight, Wand2, Copy, Download, RefreshCw } from "lucide-react";

export default function UniversalConverter() {
  const [sourceContent, setSourceContent] = useState("");
  const [convertedContent, setConvertedContent] = useState("");
  const [sourcePlatform, setSourcePlatform] = useState("");
  const [targetPlatform, setTargetPlatform] = useState("");
  const [isConverting, setIsConverting] = useState(false);

  const platforms = [
    { value: "douyin", label: "ÊäñÈü≥", emoji: "üéµ" },
    { value: "xiaohongshu", label: "Â∞èÁ∫¢‰π¶", emoji: "üìï" },
    { value: "bilibili", label: "BÁ´ô", emoji: "üì∫" },
    { value: "kuaishou", label: "Âø´Êâã", emoji: "‚ö°" },
    { value: "wechat", label: "ÂæÆ‰ø°ÂÖ¨‰ºóÂè∑", emoji: "üí¨" },
    { value: "weibo", label: "ÂæÆÂçö", emoji: "üê¶" },
    { value: "tiktok", label: "TikTok", emoji: "üé¨" },
    { value: "instagram", label: "Instagram", emoji: "üì∏" },
    { value: "youtube", label: "YouTube", emoji: "‚ñ∂Ô∏è" },
  ];

  const conversionTemplates = [
    {
      title: "ÊäñÈü≥ ‚Üí Â∞èÁ∫¢‰π¶",
      description: "Áü≠ËßÜÈ¢ëËÑöÊú¨ËΩ¨Êç¢‰∏∫ÂõæÊñáÁßçËçâÁ¨îËÆ∞",
      popular: true,
    },
    {
      title: "Â∞èÁ∫¢‰π¶ ‚Üí ÊäñÈü≥",
      description: "ÁßçËçâÁ¨îËÆ∞ËΩ¨Êç¢‰∏∫Áü≠ËßÜÈ¢ëËÑöÊú¨",
      popular: true,
    },
    {
      title: "BÁ´ô ‚Üí ÊäñÈü≥",
      description: "ÈïøËßÜÈ¢ëÂÜÖÂÆπËΩ¨Êç¢‰∏∫Áü≠ËßÜÈ¢ëËÑöÊú¨",
      popular: false,
    },
    {
      title: "ÂÖ¨‰ºóÂè∑ ‚Üí Â∞èÁ∫¢‰π¶",
      description: "ÂÖ¨‰ºóÂè∑ÊñáÁ´†ËΩ¨Êç¢‰∏∫Â∞èÁ∫¢‰π¶Á¨îËÆ∞",
      popular: false,
    },
    {
      title: "ÂæÆÂçö ‚Üí ÊäñÈü≥",
      description: "ÂæÆÂçöÂÜÖÂÆπËΩ¨Êç¢‰∏∫Áü≠ËßÜÈ¢ëÊñáÊ°à",
      popular: false,
    },
    {
      title: "TikTok ‚Üí ÊäñÈü≥",
      description: "ÂõΩÈôÖÁâàÂÜÖÂÆπÊú¨ÂúüÂåñËΩ¨Êç¢",
      popular: true,
    },
  ];

  const handleConvert = async () => {
    if (!sourceContent.trim() || !sourcePlatform || !targetPlatform) {
      return;
    }

    setIsConverting(true);

    // Simulate AI conversion process
    await new Promise((resolve) => setTimeout(resolve, 2500));

    // Mock converted content based on platforms
    let mockConversion = "";
    if (sourcePlatform === "douyin" && targetPlatform === "xiaohongshu") {
      mockConversion = `üìù ${sourceContent.split("").slice(0, 50).join("")}...

‚ú® ÁßçËçâÊåáÂçóÔºö
‚Ä¢ Á¨¨‰∏ÄÁÇπÔºö${sourceContent.split("").slice(0, 20).join("")}
‚Ä¢ Á¨¨‰∫åÁÇπÔºöÈÄÇÂêàÊó•Â∏∏‰ΩøÁî®
‚Ä¢ Á¨¨‰∏âÁÇπÔºöÊÄß‰ª∑ÊØîË∂ÖÈ´ò

üè∑Ô∏è #ÁßçËçâÂàÜ‰∫´ #Â•ΩÁâ©Êé®Ëçê #ÁîüÊ¥ªÊñπÂºè

üí° Â∞èÁ∫¢ËñØ‰ª¨ËßâÂæóÊÄé‰πàÊ†∑Âë¢Ôºü
ËØÑËÆ∫Âå∫ÂëäËØâÊàë‰Ω†‰ª¨ÁöÑÊÉ≥Ê≥ïÔΩû`;
    } else if (
      sourcePlatform === "xiaohongshu" &&
      targetPlatform === "douyin"
    ) {
      mockConversion = `üé¨ „Äê${sourceContent.split("").slice(0, 15).join("")}„Äë

ÂºÄÂú∫ÔºöÂó®Â§ßÂÆ∂Â•ΩÔºå‰ªäÂ§©ÁªôÂ§ßÂÆ∂ÂàÜ‰∫´‰∏Ä‰∏™Ë∂ÖÂÆûÁî®ÁöÑ...

ÂÜÖÂÆπË¶ÅÁÇπÔºö
1. ${sourceContent.split("").slice(0, 25).join("")}
2. Ëøô‰∏™ÊñπÊ≥ïÁúüÁöÑÂ§™Â•ΩÁî®‰∫Ü
3. Â§ßÂÆ∂‰∏ÄÂÆöË¶ÅËØïËØï

ÁªìÂ∞æÔºöÂ¶ÇÊûúËßâÂæóÊúâÁî®ÁöÑËØùÔºåËÆ∞ÂæóÁÇπËµûÂÖ≥Ê≥®Âì¶ÔºÅ

#ÊäñÈü≥ÁÉ≠Èó® #ÁîüÊ¥ªÊäÄÂ∑ß #Âπ≤Ë¥ßÂàÜ‰∫´`;
    } else {
      mockConversion = `üîÑ Â∑≤ËΩ¨Êç¢‰∏∫ ${platforms.find((p) => p.value === targetPlatform)?.label} È£éÊ†ºÔºö

${sourceContent}

‚ú® Âπ≥Âè∞‰ºòÂåñÔºö
‚Ä¢ Ë∞ÉÊï¥‰∫ÜÊ†áÈ¢òÊ†ºÂºè
‚Ä¢ ‰ºòÂåñ‰∫ÜÂÜÖÂÆπÁªìÊûÑ  
‚Ä¢ Ê∑ªÂä†‰∫ÜÂπ≥Âè∞Ê†áÁ≠æ
‚Ä¢ Â¢ûÂº∫‰∫Ü‰∫íÂä®ÂÖÉÁ¥†

üìà ËΩ¨Êç¢ÂÆåÊàêÔºåÂª∫ËÆÆÊ†πÊçÆÁõÆÊ†áÂπ≥Âè∞ÁâπÁÇπËøõ‰∏ÄÊ≠•Ë∞ÉÊï¥`;
    }

    setConvertedContent(mockConversion);
    setIsConverting(false);
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(convertedContent);
  };

  const handleTemplateSelect = (template: string) => {
    const [source, target] = template.split(" ‚Üí ");
    const sourcePlatformValue = platforms.find(
      (p) => p.label === source,
    )?.value;
    const targetPlatformValue = platforms.find(
      (p) => p.label === target,
    )?.value;

    if (sourcePlatformValue) setSourcePlatform(sourcePlatformValue);
    if (targetPlatformValue) setTargetPlatform(targetPlatformValue);
  };

  return (
    <DashboardLayout>
      <div className="p-6 max-w-7xl mx-auto">
        <div className="mb-6">
          <div className="flex items-center gap-3 mb-2">
            <h1 className="text-2xl font-bold">‰∏áËÉΩËΩ¨Êç¢</h1>
            <Badge className="bg-orange-500 text-white">üî• HOT</Badge>
          </div>
          <p className="text-muted-foreground">
            Êô∫ËÉΩËΩ¨Êç¢‰∏çÂêåÂπ≥Âè∞ÂÜÖÂÆπÔºå‰∏ÄÈîÆÈÄÇÈÖçÂêÑÂπ≥Âè∞ÁâπËâ≤È£éÊ†º
          </p>
        </div>

        {/* Quick Templates */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Wand2 className="w-5 h-5" />
              ÁÉ≠Èó®ËΩ¨Êç¢Ê®°Êùø
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {conversionTemplates.map((template, index) => (
                <Button
                  key={index}
                  variant="outline"
                  className="h-auto p-4 flex-col items-start text-left"
                  onClick={() => handleTemplateSelect(template.title)}
                >
                  <div className="flex items-center gap-2 mb-1">
                    <span className="font-medium">{template.title}</span>
                    {template.popular && (
                      <Badge variant="secondary" className="text-xs">
                        ÁÉ≠Èó®
                      </Badge>
                    )}
                  </div>
                  <span className="text-xs text-muted-foreground">
                    {template.description}
                  </span>
                </Button>
              ))}
            </div>
          </CardContent>
        </Card>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Source Content */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <span>Ê∫êÂÜÖÂÆπ</span>
                <Select
                  value={sourcePlatform}
                  onValueChange={setSourcePlatform}
                >
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="ÈÄâÊã©Ê∫êÂπ≥Âè∞" />
                  </SelectTrigger>
                  <SelectContent>
                    {platforms.map((platform) => (
                      <SelectItem key={platform.value} value={platform.value}>
                        <span className="flex items-center gap-2">
                          {platform.emoji} {platform.label}
                        </span>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="ËØ∑ËæìÂÖ•ÈúÄË¶ÅËΩ¨Êç¢ÁöÑÂÜÖÂÆπ...&#10;&#10;ÊîØÊåÅÔºö&#10;‚Ä¢ ËßÜÈ¢ëÊñáÊ°à/ËÑöÊú¨&#10;‚Ä¢ ÂõæÊñáÂÜÖÂÆπ&#10;‚Ä¢ Ê†áÈ¢òÊèèËø∞&#10;‚Ä¢ ÂÆåÊï¥ÊñáÁ´†"
                value={sourceContent}
                onChange={(e) => setSourceContent(e.target.value)}
                className="min-h-[300px] resize-none"
              />

              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">
                  {sourceContent.length} Â≠óÁ¨¶
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setSourceContent("")}
                  >
                    Ê∏ÖÁ©∫
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Converted Content */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <span>ËΩ¨Êç¢ÁªìÊûú</span>
                <ArrowRight className="w-4 h-4 text-muted-foreground" />
                <Select
                  value={targetPlatform}
                  onValueChange={setTargetPlatform}
                >
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="ÈÄâÊã©ÁõÆÊ†áÂπ≥Âè∞" />
                  </SelectTrigger>
                  <SelectContent>
                    {platforms.map((platform) => (
                      <SelectItem key={platform.value} value={platform.value}>
                        <span className="flex items-center gap-2">
                          {platform.emoji} {platform.label}
                        </span>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="ËΩ¨Êç¢ÂêéÁöÑÂÜÖÂÆπÂ∞ÜÊòæÁ§∫Âú®ËøôÈáå..."
                value={convertedContent}
                readOnly
                className="min-h-[300px] resize-none bg-gray-50"
              />

              <div className="flex items-center justify-between">
                <div className="text-sm text-muted-foreground">
                  {convertedContent.length} Â≠óÁ¨¶
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={handleCopy}
                    disabled={!convertedContent}
                  >
                    <Copy className="w-4 h-4 mr-2" />
                    Â§çÂà∂
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={!convertedContent}
                  >
                    <Download className="w-4 h-4 mr-2" />
                    ÂØºÂá∫
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Convert Button */}
        <div className="mt-6 text-center">
          <Button
            onClick={handleConvert}
            disabled={
              !sourceContent.trim() ||
              !sourcePlatform ||
              !targetPlatform ||
              isConverting
            }
            className="bg-orange-500 hover:bg-orange-600 text-white px-8 py-3 text-lg h-auto"
            size="lg"
          >
            {isConverting ? (
              <>
                <RefreshCw className="w-5 h-5 mr-2 animate-spin" />
                AI ËΩ¨Êç¢‰∏≠...
              </>
            ) : (
              <>
                <Wand2 className="w-5 h-5 mr-2" />
                ÂºÄÂßãÊô∫ËÉΩËΩ¨Êç¢
              </>
            )}
          </Button>
        </div>

        {/* Features */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>ËΩ¨Êç¢ÁâπÊÄß</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="text-center p-4">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  üéØ
                </div>
                <h3 className="font-medium mb-1">Êô∫ËÉΩÈÄÇÈÖç</h3>
                <p className="text-sm text-muted-foreground">
                  Ê†πÊçÆÁõÆÊ†áÂπ≥Âè∞ÁâπÁÇπËá™Âä®Ë∞ÉÊï¥ÂÜÖÂÆπÈ£éÊ†º
                </p>
              </div>
              <div className="text-center p-4">
                <div className="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  ‚ö°
                </div>
                <h3 className="font-medium mb-1">Âø´ÈÄüËΩ¨Êç¢</h3>
                <p className="text-sm text-muted-foreground">
                  AI È©±Âä®ÔºåÁßíÁ∫ßÂÆåÊàêÂÜÖÂÆπËΩ¨Êç¢
                </p>
              </div>
              <div className="text-center p-4">
                <div className="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  üé®
                </div>
                <h3 className="font-medium mb-1">È£éÊ†º‰ºòÂåñ</h3>
                <p className="text-sm text-muted-foreground">
                  ‰øùÊåÅÂéüÊÑèÁöÑÂêåÊó∂‰ºòÂåñË°®ËææÊñπÂºè
                </p>
              </div>
              <div className="text-center p-4">
                <div className="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  üìä
                </div>
                <h3 className="font-medium mb-1">Â§öÂπ≥Âè∞ÊîØÊåÅ</h3>
                <p className="text-sm text-muted-foreground">
                  ÊîØÊåÅ‰∏ªÊµÅÁ§æ‰∫§Â™í‰ΩìÂπ≥Âè∞‰∫íËΩ¨
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}
